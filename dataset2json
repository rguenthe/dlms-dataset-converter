#!/usr/bin/python3

import argparse
import sys
import os
import zipfile
import shutil

from dataconverter import DataConverter


def get_files(dir):
    """Return list of files in the given directory."""
    files = []
    if not os.path.exists(dir):
        raise OSError('Directory "%s" does not exist!' % (dir))

    for (dirpath, dirnames, filenames) in os.walk(dir):
        files.extend(filenames)
        break

    return files


def main():
    parser = argparse.ArgumentParser(prog='dataset2json',
                                     description='Dataset to Json/Xml Converter: Converts .zip datasets to Json/Xml datasets',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input', metavar='<in dir>', help='directory containing the zip files')
    parser.add_argument('output', metavar='<out dir>', help='directory to which the output files will be saved')
    parser.add_argument('format', metavar='<out format>', choices=['json', 'xml', 'csv'], help='output format (json or xml)')
    parser.add_argument('--serial', metavar='<serial>', help='serial number of the client of the datasets', default='123456')

    args = parser.parse_args()

    input_dir = args.input
    output_dir = args.output
    serial = args.serial
    out_format = args.format

    extract_dir = 'tmp'
    processed_dir = 'processed'

    sys.stdout.write('-------------------------------------------------------------\n')
    sys.stdout.write('dataset2json converter\n')
    sys.stdout.write('-------------------------------------------------------------\n')
    sys.stdout.write('input dir:     %s\n' % (input_dir))
    sys.stdout.write('output dir:    %s\n' % (output_dir))
    sys.stdout.write('output format: %s\n' % (out_format))
    sys.stdout.write('\nstart conversion...\n')

    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    files = get_files(input_dir)
    for file in files:
        zf = zipfile.ZipFile(input_dir + '/' + file, 'r')
        zf.extractall(extract_dir)

        converter = DataConverter(in_dir=extract_dir, out_dir=output_dir, zipfilename=file, serial=serial)
        converter.run(output_format=out_format)

        shutil.rmtree(extract_dir)
        shutil.move(input_dir + '/' + file, processed_dir + '/' + file)

    sys.stdout.write('done\n')

    return 0

if __name__ == "__main__":
    try:
        ret = main()
    except Exception:
        ret = 1
        import traceback
        traceback.print_exc(5)
    sys.exit(ret)
